{"version":3,"sources":["components/Card.js","components/CardList.js","components/SearchBox.js","components/errorboundary.js","components/Scroll.js","components/Header.js","containers/App.js","actions.js","constants.js","serviceWorker.js","reducers.js","index.js"],"names":["Card","_ref","name","email","id","react_default","a","createElement","className","alt","src","concat","href","CardList","robots","map","user","i","components_Card","key","SearchBox","searchfield","searchChange","aria-label","type","placeholder","onChange","ErrorBoundary","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","hasError","setState","children","Component","Scroll","Header","nextProps","nextState","App","onRequestRobots","_this$props","searchField","onSearchChange","isPending","filteredRobots","filter","robot","toLowerCase","includes","components_Header","components_SearchBox","components_Scroll","errorboundary","components_CardList","connect","searchRobots","requestRobots","error","dispatch","event","payload","target","value","fetch","then","response","json","data","catch","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","onUpdate","onSuccess","initialStateSearch","initialStateRobots","rootReducer","combineReducers","arguments","length","undefined","action","assign","store","createStore","applyMiddleware","thunkMiddleware","ReactDOM","render","es","src_containers_App","document","getElementById","URL","process","origin","addEventListener","contentType","headers","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.63396308.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst Card = ({ name, email, id }) => {\r\n    return (\r\n        <div className='tc bg-light-green dib br3 pa3 ma2 grow bw2 shadow-5'>\r\n            <img alt='robots' src={`https://robohash.org/${id}?size=150x150`} />\r\n            <div>\r\n                <h3>{name}</h3>\r\n                <p><a href={`mailto:${email}`}>{email}</a></p>\r\n            </div>\r\n\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Card;","import React from 'react';\r\nimport Card from './Card';\r\n\r\n\r\nconst CardList = ({ robots }) => {\r\n    return(\r\n        <div>\r\n            {\r\n                robots.map((user, i) => {\r\n                    return (\r\n                        <Card \r\n                            key={i} \r\n                            id={robots[i].id} \r\n                            name={robots[i].name} \r\n                            email={robots[i].email}\r\n                            />\r\n                    );\r\n                })\r\n            }\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default CardList;","import React from 'react';\r\nimport '../containers/App.css';\r\n\r\nconst SearchBox = ({ searchfield, searchChange }) => {\r\n    return (\r\n        <div className='pa2'>\r\n            <input\r\n                aria-label='Search Robots' \r\n                className='pa3 bqa b--green bg-lightest-blue search'\r\n                type='search' \r\n                placeholder='Search Robots' \r\n                onChange={searchChange}\r\n            />\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default SearchBox;","import React, { Component } from 'react';\r\n\r\nclass ErrorBoundary extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            hasError: false\r\n        }\r\n    }\r\n\r\n    componentDidCatch() {\r\n        this.setState({ hasError: true })\r\n    }\r\n\r\n    render() {\r\n        if (this.state.hasError) {\r\n            return <h1>Oooops. That is not good.</h1>\r\n        }\r\n\r\n        return this.props.children\r\n    }\r\n\r\n}\r\n\r\nexport default ErrorBoundary;","import React from 'react';\r\nimport '../containers/App.css';\r\n\r\nconst Scroll = (props) => {\r\n    return (\r\n        <div className='scrollbar'>\r\n            {props.children}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Scroll;","import React, { Component } from 'react';\r\n\r\n\r\nclass Header extends Component {\r\n    shouldComponentUpdate(nextProps, nextState) {\r\n        return false;\r\n    }\r\n    render() {\r\n        return (\r\n            <div>\r\n                <h1 className='robofriends'>RoboFriends</h1>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Header;","import React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport CardList from '../components/CardList';\r\nimport SearchBox from '../components/SearchBox';\r\nimport ErrorBoundary from '../components/errorboundary';\r\nimport Scroll from '../components/Scroll';\r\nimport Header from '../components/Header'\r\nimport './App.css';\r\n\r\nimport { setSearchField, requestRobots } from '../actions';\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        searchField: state.searchRobots.searchField,\r\n        robots: state.requestRobots.robots,\r\n        isPending: state.requestRobots.isPending,\r\n        error: state.requestRobots.error\r\n    };\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        onSearchChange: (event) => dispatch(setSearchField(event.target.value)),\r\n        onRequestRobots: () => dispatch(requestRobots())\r\n    }\r\n}\r\n\r\nclass App extends Component {\r\n    componentDidMount() {\r\n        this.props.onRequestRobots();\r\n    }\r\n\r\n\r\n    render() {\r\n        const { searchField, onSearchChange, robots, isPending } = this.props;\r\n        const filteredRobots = robots.filter(robot => {\r\n            return robot.name.toLowerCase().includes(searchField.toLowerCase());\r\n        });\r\n        return isPending ?\r\n           <h1 className='tc f1'>LOADING...</h1> : \r\n           (\r\n                 <div className='tc'>\r\n                     <Header />\r\n                     <SearchBox searchChange={onSearchChange}/>\r\n                     <Scroll>\r\n                        <ErrorBoundary>\r\n                            <CardList robots={filteredRobots}/> \r\n                        </ErrorBoundary>\r\n                     </Scroll>\r\n                 </div>\r\n             ); \r\n        }\r\n    }\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(App);","import { \r\n    CHANGE_SEARCH_FIELD,\r\n    REQUEST_ROBOTS_PENDING,\r\n    REQUEST_ROBOTS_SUCCESS,\r\n    REQUEST_ROBOTS_FAILED\r\n} from './constants';\r\n\r\nexport const setSearchField = (text) => ({\r\n    type: CHANGE_SEARCH_FIELD,\r\n    payload: text\r\n})\r\n\r\nexport const requestRobots = () => (dispatch) => {\r\n    dispatch({ type: REQUEST_ROBOTS_PENDING });\r\n    fetch('https://jsonplaceholder.typicode.com/users')\r\n            .then(response => response.json())\r\n            .then(data => dispatch({ type: REQUEST_ROBOTS_SUCCESS, payload: data }))\r\n            .catch(error => dispatch({ type: REQUEST_ROBOTS_FAILED, payload: error }))\r\n}","export const CHANGE_SEARCH_FIELD = 'CHANGE_SEARCH_FIELD';\r\n\r\nexport const REQUEST_ROBOTS_PENDING = 'REQUEST_ROBOTS_PENDING';\r\nexport const REQUEST_ROBOTS_SUCCESS = 'REQUEST_ROBOTS_SUCCESS';\r\nexport const REQUEST_ROBOTS_FAILED = 'REQUEST_ROBOTS_FAILED';","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import { \r\n    CHANGE_SEARCH_FIELD,\r\n    REQUEST_ROBOTS_PENDING,\r\n    REQUEST_ROBOTS_SUCCESS,\r\n    REQUEST_ROBOTS_FAILED\r\n} from './constants';\r\n\r\nconst initialStateSearch = {\r\n    searchField: ''\r\n}\r\n\r\nexport const searchRobots = (state=initialStateSearch, action={}) => {\r\n    switch(action.type) {\r\n        case CHANGE_SEARCH_FIELD:\r\n            return Object.assign({}, state, {searchField:action.payload});\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nconst initialStateRobots = {\r\n    isPending: false,\r\n    robots: [],\r\n    error: ''\r\n}\r\n\r\nexport const requestRobots = (state=initialStateRobots, action={}) => {\r\n    switch(action.type) {\r\n        case REQUEST_ROBOTS_PENDING:\r\n            return Object.assign({}, state, { isPending: true });\r\n        case REQUEST_ROBOTS_SUCCESS:\r\n            return Object.assign({}, state, { robots: action.payload, isPending:false });\r\n        case REQUEST_ROBOTS_FAILED:\r\n            return Object.assign({}, state, { error: action.payload, isPending: false});\r\n        default:\r\n            return state;\r\n    }\r\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { createStore, applyMiddleware, combineReducers } from 'redux';\n// import { createLogger } from 'redux-logger';\nimport thunkMiddleware from 'redux-thunk';\nimport './index.css';\nimport App from './containers/App';\nimport * as serviceWorker from './serviceWorker';\nimport { searchRobots, \n         requestRobots } from './reducers';\nimport 'tachyons';\n\n// const logger = createLogger();\n\nconst rootReducer = combineReducers({ \n    searchRobots,\n    requestRobots\n})\nconst store = \n    createStore(rootReducer, applyMiddleware(thunkMiddleware))\n\nReactDOM.render(\n    <Provider store={store}>\n        <App />\n    </Provider>\n, document.getElementById('root'));\n\nserviceWorker.register();\n"],"sourceRoot":""}